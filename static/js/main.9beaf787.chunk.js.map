{"version":3,"sources":["ui/Login.js","dal/taskAPI.js","bll/loginReducer.js","Selectors/loginSelectors.js","Controllers/LoginControler.js","ui/NewTaskForm.js","ui/Pagination.js","ui/TasksList.js","Selectors/tasksSelector.js","bll/tasksReducer.js","dal/TaskModel.js","Controllers/TasksController.js","ui/TasksManagement.js","Controllers/TaskManagementController.js","App.js","serviceWorker.js","bll/store.js","index.js"],"names":["Input","error","input","meta","props","touched","invalid","placeholder","fieldRequired","value","reduxForm","form","token","to","onSubmit","handleSubmit","errorMessage","Field","component","type","name","validate","instance","axios","baseURL","tasksAPI","getTasks","page","sort_field","sort_direction","get","then","response","data","catch","err","addTask","task","username","email","text","FormData","append","post","logIn","user","password","accessData","editTask","status","id","SET_ERROR","SET_TOKEN","initState","isAuthMessage","setError","setToken","setIsAuthMessage","message","logOut","dispatch","window","localStorage","setItem","loginReducer","state","action","tokenSelector","createSelector","login","errorMessageSelector","connect","a","emailRequired","errors","test","NewTaskForm","injectSheet","paginationActive","cursor","border","background","color","padding","pagination","margin","navigationPage","marginTop","marginBottom","pages","currentPage","classes","setCurrentPage","className","map","p","index","key","onClick","wrapperContent","display","gridTemplateColumns","taskTitle","length","title","fontSize","fontWeight","paddingLeft","marginRight","backgroundColor","content","borderBottom","textAlign","tasks","newTask","setSortSettings","direction","editStatus","event","target","dataset","currentTarget","checked","saveStatus","saveText","Object","keys","values","String","data-id","onChange","editModeSelector","tasksPage","editMode","statusSelector","newTaskSelector","currentPageSelector","sortFieldSelector","directionSelector","sortDirectionSelector","isAuthMessageSelector","tasksSelector","tasksTitleSelector","pagesSelector","total_task_count","pageCount","Math","ceil","i","push","ADD_TASK","SET_TASKS","NEW_TASK","SET_CURRENT_PAGE","SET_SORT_FIELD","SET_DIRECTION","SET_CHANGE_TEXT","SET_CHANGE_STATUS","messageSuccess","setTask","setTasks","setNewTask","changeText","changeStatus","getTasksAll","getState","console","log","tasksReduser","filed","newTasks","alert","reset","field","getItem","React","useEffect","flexDirection","width","navbar","path","render","exact","isAuth","App","Boolean","location","hostname","match","reducers","combineReducers","formReducer","store","createStore","applyMiddleware","thunk","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gSAiBMA,EAAQ,SAAC,GAA6B,IACpCC,EADQC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,KAASC,EAAW,gCAKvC,OAHID,EAAKE,SAAWF,EAAKG,UACrBL,EAAQE,EAAKF,OAEV,6BACH,2CAAWG,EAAWF,EAAtB,CAA6BK,YAAaN,OAI9CO,EAAgB,SAACC,GACjB,IAAKA,EAAO,MAAO,YAGRC,cAAU,CAACC,KAAM,SAAjBD,EA1BD,SAACN,GACX,OAAO,oCACFA,EAAMQ,OAAS,kBAAC,IAAD,CAAUC,GAAI,MAC9B,0BAAMC,SAAUV,EAAMW,cACjBX,EAAMY,cAAgBZ,EAAMY,aAC7B,kBAACC,EAAA,EAAD,CAAOC,UAAWlB,EAAOmB,KAAM,OAAQC,KAAM,WAAYC,SAAU,CAACb,KACpE,kBAACS,EAAA,EAAD,CAAOC,UAAWlB,EAAOmB,KAAM,WAAYC,KAAM,WAAYC,SAAU,CAACb,KACxE,4BAAQW,KAAK,UAAb,c,0CCRCG,EAAWC,SAAa,CACjCC,QAAS,wDAgEEC,EA7DE,CACbC,SADa,WACmC,IAAvCC,EAAsC,uDAA/B,EAAGC,EAA4B,uCAAhBC,EAAgB,uCAC3C,OAAOP,EAASQ,IAAT,qBARE,UAQF,iBAA4CH,EAA5C,uBAA+DC,EAA/D,2BAA4FC,IAAkBE,MAAK,SAAAC,GACtH,OAAOA,EAASC,QACjBC,OAAM,SAAAC,GACL,OAAOA,MAGfC,QARa,SAQLC,GAAO,IACNC,EAAyBD,EAAzBC,SAAUC,EAAeF,EAAfE,MAAOC,EAAQH,EAARG,KAClB7B,EAAO,IAAI8B,SAIf,OAHA9B,EAAK+B,OAAO,WAAYJ,GACxB3B,EAAK+B,OAAO,QAASH,GACrB5B,EAAK+B,OAAO,OAAQF,GACblB,EAASqB,KAAT,2BApBE,WAoB4ChC,GAAMoB,MAAK,SAAAC,GAC5D,OAAOA,EAASC,QACjBC,OAAM,SAAAC,GACL,OAAOA,MAIfS,MArBa,SAqBPC,GAAO,IACJP,EAAsBO,EAAtBP,SAAUQ,EAAYD,EAAZC,SACXC,EAAa,IAAIN,SAGrB,OAFAM,EAAWL,OAAO,WAAYJ,GAC9BS,EAAWL,OAAO,WAAYI,GACvBxB,EAASqB,KAAT,0BAhCE,WAgC2CI,GAAYhB,MAAK,SAAAC,GAEjE,OAAOA,EAASC,QACjBC,OAAM,SAAAC,GACL,OAAOA,MAIfa,SAlCa,SAkCJf,GAAO,IAERc,EADCnC,EAA2BqB,EAA3BrB,MAAO4B,EAAoBP,EAApBO,KAAMS,EAAchB,EAAdgB,OAAQC,EAAMjB,EAANiB,GAY1B,OAVGV,IACCO,EAAa,IAAIN,UACNC,OAAO,OAAQF,GAC1BO,EAAWL,OAAO,QAAS9B,MAE3BmC,EAAa,IAAIN,UACNC,OAAO,SAAUO,GAC5BF,EAAWL,OAAO,QAAS9B,IAGxBU,EAASqB,KAAT,gBAAuBO,EAAvB,sBArDE,WAqDiDH,GAAYhB,MAAK,SAAAC,GAEvE,OAAOA,EAASC,QACjBC,OAAM,SAAAC,GACL,OAAOA,O,yjBCzDnB,IAAMgB,EAAY,wBACZC,EAAY,wBAGZC,EAAY,CACdrC,aAAc,KACdJ,MAAO,KACP0C,cAAe,+SA0BbC,EAAW,SAACtD,GAAD,MAAY,CAACkB,KAAMgC,EAAWlD,UACzCuD,EAAW,SAAC5C,GAAD,MAAY,CAACO,KAAMiC,EAAWxC,UACzC6C,EAAmB,SAACC,GAAD,MAAc,CAACvC,KAjCZ,kCAiCuCuC,YAoBtDC,EAAS,kBAAM,SAACC,GACzBA,EAASJ,EAAS,OAClBI,EAASJ,EAASK,OAAOC,aAAaC,QAAQ,QAAS,MACvDH,EAASH,EAAiB,kTAGfO,EAlDM,WAAgC,IAA/BC,EAA8B,uDAAtBZ,EAAWa,EAAW,uCAChD,OAAQA,EAAO/C,MACX,KAAKgC,EACD,OAAO,EAAP,GACOc,EADP,CAEIjD,aAAckD,EAAOjE,QAE7B,KAAKmD,EACD,OAAO,EAAP,GACOa,EADP,CAEIrD,MAAOsD,EAAOtD,QAEtB,IArBoB,kCAsBhB,OAAO,EAAP,GACOqD,EADP,CAEIX,cAAeY,EAAOR,UAE9B,QACI,OAAOO,I,QCzBNE,EAAgBC,aAJZ,SAAAH,GAAK,OAAIA,EAAMI,MAAMzD,SAMlC,SAACA,GAAD,OAAWA,KAGF0D,EAAuBF,aARZ,SAAAH,GAAK,OAAIA,EAAMI,MAAMrD,gBAUzC,SAACA,GAAD,OAAkBA,KCONuD,eAPC,SAACN,GACd,MAAO,CACHrD,MAAOuD,EAAcF,GACrBjD,aAAcsD,EAAqBL,MAIT,CAACI,MFmBd,SAAC5D,GAAD,8CAAW,WAAOmD,GAAP,eAAAY,EAAA,sEACX/C,EAASmB,MAAMnC,GADJ,OAGR,WAFhBwB,EADwB,QAGnBgB,OACLW,EAASL,EAAStB,EAAKyB,QAAQZ,YAE/Bc,EAASL,EAAS,OAClBK,EAASJ,EAASvB,EAAKyB,QAAQ9C,QAC/BgD,EAASH,EAAiB,KAC1BI,OAAOC,aAAaC,QAAQ,QAAS9B,EAAKyB,QAAQ9C,QAT1B,2CAAX,uDEnBqB+C,UAA1BY,EAdQ,SAACnE,GAIrB,OAAO,kBAAC,EAAD,iBAAWA,EAAX,CAAmBU,SAHT,SAACL,GACdL,EAAMiE,MAAM5D,IAE8BkD,OAAQA,QCGpD3D,EAAQ,SAAC,GAA6B,IACpCC,EADQC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,KAASC,EAAW,gCAKvC,OAHGD,EAAKE,SAAWF,EAAKG,UACpBL,EAAQE,EAAKF,OAEV,6BACH,2CAAWG,EAAWF,EAAtB,CAA6BK,YAAaN,OAI9CO,EAAgB,SAACC,GACjB,IAAKA,EAAO,MAAO,YAGnBgE,EAAgB,SAAChE,GACjB,IAAMiE,EAAS,GACVjE,EAAM8B,MAEC,4CAA4CoC,KAAKlE,EAAM8B,SAC/DmC,EAAOnC,MAAQ,yBAFfmC,EAAOnC,MAAQ,YAMRqC,EAjCK,WAChB,OAAO,oCACH,+BACA,kBAAC3D,EAAA,EAAD,CAAOC,UAAWlB,EAAOmB,KAAM,OAAQC,KAAM,WAAYC,SAAU,CAACb,KACpE,kBAACS,EAAA,EAAD,CAAOC,UAAWlB,EAAOmB,KAAM,QAASC,KAAM,QAASC,SAAU,CAACb,EAAeiE,KACjF,kBAACxD,EAAA,EAAD,CAAOC,UAAWlB,EAAOmB,KAAM,OAAQC,KAAM,OAAQC,SAAU,CAACb,KAChE,4BAAQW,KAAK,UAAb,sDC4BO0D,MA5BF,CACTC,iBAAkB,CACdC,OAAQ,UACRC,OAAQ,YACRC,WAAY,UACZC,MAAO,OACPC,QAAS,OAGbC,WAAY,CACRL,OAAQ,UACRE,WAAY,OACZC,MAAO,OACPC,QAAS,MACTE,OAAQ,MACR,UAAW,CACPN,OAAQ,UACRE,WAAY,UACZC,MAAO,OACPC,QAAS,QAGjBG,eAAgB,CACZC,UAAW,OACXC,aAAc,SAIPX,EAlCI,SAAC,GAAmD,IAAlDY,EAAiD,EAAjDA,MAAOC,EAA0C,EAA1CA,YAAaC,EAA6B,EAA7BA,QAASC,EAAoB,EAApBA,eAClD,OAAO,yBAAKC,UAAWF,EAAQL,gBAC1BG,EAAMK,KAAI,SAACC,EAAGC,GAAJ,OAAc,0BAAMC,IAAKD,EAAOE,QAAS,kBAAMN,EAAeG,IAAIF,UAAWH,IAAgBK,EAAIJ,EAAQb,iBAAmBa,EAAQP,YAAaW,UCmFjJrF,cAAU,CAACC,KAAM,YAAjBD,CAA8BmE,IA5BhC,CACTsB,eAAgB,SAAC/F,GAAD,MAAY,CACxBgG,QAAS,OACTC,oBAAoB,UAAD,OAAYjG,EAAMkG,UAAUC,OAA5B,YAGvBC,MAAO,CACHzB,OAAQ,UACR0B,SAAU,OACVC,WAAY,OACZC,YAAa,MACbC,YAAa,MACbC,gBAAiB,WAGrBC,QAAS,CACLL,SAAU,OACVpB,OAAQ,MACR0B,aAAc,qBAElB3B,WAAY,CACR4B,UAAW,UAEf/G,MAAO,CACHiF,MAAO,QAI8BL,EAjF3B,SAACzE,GAAW,IACnB6G,EAAiJ7G,EAAjJ6G,MAAOX,EAA0IlG,EAA1IkG,UAAWX,EAA+HvF,EAA/HuF,QAASuB,EAAsH9G,EAAtH8G,QAAS9E,EAA6GhC,EAA7GgC,QAASqD,EAAoGrF,EAApGqF,MAAOC,EAA6FtF,EAA7FsF,YAAaE,EAAgFxF,EAAhFwF,eAAgBuB,EAAgE/G,EAAhE+G,gBAAiBvF,EAA+CxB,EAA/CwB,WAAYwF,EAAmChH,EAAnCgH,UAAWxG,EAAwBR,EAAxBQ,MAAO0C,EAAiBlD,EAAjBkD,cAGjI+D,EAAa,SAACC,GAChB,IAAIpE,EAAKoE,EAAMC,OAAOC,QAAQtE,GAC1BzC,EAAQ6G,EAAMG,cAAcC,QAAU,GAAK,EAC/CtH,EAAMuH,WAAWzE,EAAIzC,IAInBmH,EAAW,SAACN,GACd,IAAIpE,EAAKoE,EAAMC,OAAOC,QAAQtE,GAC1BzC,EAAQ6G,EAAMG,cAAchH,MAChCL,EAAMwH,SAAS1E,EAAIzC,IAIvB,OAAO,6BACH,0BAAMoF,UAAWF,EAAQ1F,OAAQqD,GAAiBA,GAClD,6BACI,4BAAQ4C,QAAS9D,GAAjB,0FAEJ,0BAAMtB,SAAUV,EAAMW,cAClB,yBAAK8E,UAAWF,EAAQQ,gBACnBG,EAAUR,KAAI,SAAAU,GAAK,OAAI,0BAAMP,IAAK4B,OAAOC,KAAKtB,GACjBN,QAAS,kBAAMiB,EAAgBU,OAAOC,KAAKtB,KAC3CX,UAAWF,EAAQa,OAAQqB,OAAOE,OAAOvB,GAAO,8BAAOwB,OAAOH,OAAOC,KAAKtB,MAAY5E,GAAcwF,OAChIxG,EAKEqG,EAAMnB,KAAI,SAAAzD,GAAI,OACVwF,OAAOC,KAAKzF,GAAMyD,KAAI,SAACG,EAAKD,GAAN,OAA+B,KAAd3D,EAAK4D,IAA6B,IAAd5D,EAAK4D,GAC5D,2BAAOA,IAAKD,EAAOiC,UAAS5F,EAAKa,GAAI/B,KAAM,WAAYuG,QAASrF,EAAK4D,GAC9DiC,SAAUb,IAAwB,SAARpB,EAC7B,2BAAOA,IAAKD,EAAOiC,UAAS5F,EAAKa,GAAI/B,KAAM,OAAQV,MAAO4B,EAAK4D,GACxDiC,SAAUN,IACjB,0BAAM3B,IAAKD,EAAOH,UAAWF,EAAQmB,SAAUzE,EAAK4D,UAX1DgB,EAAMnB,KAAI,SAAAzD,GAAI,OAChBwF,OAAOC,KAAKzF,GAAMyD,KAAI,SAACG,EAAKD,GAAN,OAA+B,KAAd3D,EAAK4D,GACxC,0BAAMA,IAAKD,GAAX,0DAAmD,IAAd3D,EAAK4D,GAAa,0BAAMA,IAAKD,GAAX,uEACnD,yBAAKC,IAAKD,EAAOH,UAAWF,EAAQmB,SAAUzE,EAAK4D,UAYlEiB,GAAW,kBAAC,EAAD,QAGpB,yBAAKrB,UAAWF,EAAQP,YACpB,kBAAC,EAAD,CAAYK,MAAOA,EAAOC,YAAaA,EAAaE,eAAgBA,UCdnEuC,EAAmB/D,aAtCZ,SAAAH,GAAK,OAAIA,EAAMmE,UAAUC,YAsCe,SAAAA,GAAQ,OAAIA,KAC3DC,EAAiBlE,aAtCZ,SAAAH,GAAK,OAAIA,EAAMmE,UAAUnF,UAsCa,SAAAA,GAAM,OAAIA,KACrDsF,EAAkBnE,aAtCZ,SAAAH,GAAK,OAAIA,EAAMmE,UAAUlB,WAsCc,SAAAA,GAAO,OAAIA,KACxDsB,EAAsBpE,aAtCZ,SAAAH,GAAK,OAAIA,EAAMmE,UAAU1C,eAsCkB,SAAAA,GAAW,OAAIA,KACpE+C,EAAoBrE,aAtCZ,SAAAH,GAAK,OAAIA,EAAMmE,UAAUxG,cAsCgB,SAAAA,GAAU,OAAIA,KAC/D8G,EAAoBtE,aAtCZ,SAAAH,GAAK,OAAIA,EAAMmE,UAAUhB,aAsCgB,SAAAA,GAAS,OAAIA,KAC9DuB,EAAwBvE,aAtCZ,SAAAH,GAAK,OAAIA,EAAMmE,UAAUvG,kBAsCoB,SAAAA,GAAc,OAAIA,KAC3E+G,EAAwBxE,aAtCZ,SAAAH,GAAK,OAAIA,EAAMmE,UAAU9E,iBAsCoB,SAAAA,GAAa,OAAIA,KAC1EuF,EAAgBzE,aArCL,SAAAH,GACpB,IAAMgD,EAAQhD,EAAMmE,UAAUnB,MAC9B,OAAIA,EAAMV,OACCsB,OAAOC,KAAKb,GAAOnB,KAAI,SAAAG,GAAG,MAAK,CAClC/C,GAAI+D,EAAMhB,GAAK/C,GACfZ,SAAU2E,EAAMhB,GAAK3D,SACrBC,MAAO0E,EAAMhB,GAAK1D,MAClBC,KAAMyE,EAAMhB,GAAKzD,KACjBS,OAAQgE,EAAMhB,GAAKhD,WAEbgE,KA2BoC,SAACA,GAAD,OAAWA,KACpD6B,GAAqB1E,aAzBL,SAAAH,GACzB,IAAMqC,EAAYrC,EAAMmE,UAAU9B,UAClC,OAAOuB,OAAOC,KAAKxB,GAAWR,KAAI,SAAAG,GAAG,sBAAOA,EAAMK,EAAUL,UAuBD,SAACK,GAAD,OAAeA,KACjEyC,GAAgB3E,aArBL,SAAAH,GAIpB,IAHA,IAAM+E,EAAmB/E,EAAMmE,UAAUY,iBACrCC,EAAYC,KAAKC,KAAKH,EAAmB,GACzCvD,EAAQ,GACH2D,EAAI,EAAGA,GAAKH,EAAWG,IAC5B3D,EAAM4D,KAAKD,GAEf,OAAO3D,KAc0C,SAACA,GAAD,OAAWA,K,+kBC7ChE,IAAM6D,GAAW,4BACXC,GAAY,6BACZC,GAAW,4BACXC,GAAmB,oCACnBC,GAAiB,kCACjBC,GAAgB,iCAChBC,GAAkB,mCAClBC,GAAoB,qCAEpBxG,GAAY,CACdiD,UCfqB,CACrBpD,GAAI,KACJZ,SAAU,8FACVC,MAAO,SACPC,KAAM,sEACNS,OAAQ,wCDWRgE,MAAO,GACP+B,iBAAkB,EAClB9B,QAAS,KACTmB,UAAU,EACVyB,eAAgB,KAChBrE,MAAO,GACPC,YAAa,EACb9D,WAAY,KACZC,eAAgB,MAChBuF,UAAW,OAkET2C,GAAU,SAAC1H,GAAD,MAAW,CAAClB,KAAMmI,GAAUjH,SACtC2H,GAAW,SAAC/C,EAAO+B,GAAR,MAA8B,CAAC7H,KAAMoI,GAAWtC,QAAO+B,qBAClEiB,GAAa,SAAC5H,GAAD,MAAW,CAAClB,KAAMqI,GAAUnH,SAIzC6H,GAAa,SAAChH,EAAIzC,GAAL,MAAgB,CAACU,KAAMyI,GAAiB1G,KAAIzC,UACzD0J,GAAe,SAACjH,EAAIzC,GAAL,MAAgB,CAACU,KAAM0I,GAAmB3G,KAAIzC,UAuBtD2J,GAAc,yDAAM,WAAOxG,EAAUyG,GAAjB,2BAAA7F,EAAA,6DACvBkB,EAAc2E,IAAWjC,UAAU1C,YACnC9D,EAAayI,IAAWjC,UAAUxG,WAClCC,EAAiBwI,IAAWjC,UAAUvG,eAHf,SAIZJ,EAASC,SAASgE,EAAa9D,EAAYC,GAJ/B,OAKT,QADhBI,EAJyB,QAKpBgB,QAAkB,EACShB,EAAKyB,QAAhCuD,EADiB,EACjBA,MAAO+B,EADU,EACVA,iBACZpF,EAASoG,GAAS/C,EAAO+B,KAEzBsB,QAAQC,IAAItI,EAAKyB,SATQ,2CAAN,yDAmCZ8G,GA/HM,WAAgC,IAA/BvG,EAA8B,uDAAtBZ,GAAWa,EAAW,uCAChD,OAAQA,EAAO/C,MACX,KAAKqI,GACD,OAAO,MACAvF,EADP,CAEIiD,QAAShD,EAAO7B,OAExB,KAAKiH,GACD,OAAO,MACArF,EADP,CAEIgD,MAAM,GAAD,oBAAMhD,EAAMgD,OAAZ,CAAmB/C,EAAO7B,SAEvC,KAAKkH,GACD,OAAO,MACAtF,EADP,CAEIgD,MAAO/C,EAAO+C,MACd+B,iBAAkB9E,EAAO8E,mBAEjC,KAAKS,GACD,OAAO,MACAxF,EADP,CAEIyB,YAAaxB,EAAOwB,cAE5B,KAAKiE,GACD,OAAO,MACA1F,EADP,CAEIpC,eAAyC,QAAzBoC,EAAMpC,eAA2B,OAAS,MAC1DuF,UAA+B,QAApBnD,EAAMmD,UAAsB,MAAQ,QAEvD,KAAKsC,GACD,OAAO,MACAzF,EADP,CAEIrC,WAAYsC,EAAOuG,MAAM,KAEjC,KAAKb,GAED,IADA,IAAIc,EAAQ,aAAOzG,EAAMgD,OAChBmC,EAAI,EAAGA,EAAIsB,EAASnE,OAAQ6C,IAC7BsB,EAAStB,GAAGlG,IAAMgB,EAAOhB,KACzBwH,EAAStB,GAAG5G,KAAO0B,EAAOzD,OAGlC,OAAO,MACAwD,EADP,CAEIgD,MAAOyD,IAEf,KAAKb,GAED,IADA,IAAIa,EAAQ,aAAOzG,EAAMgD,OAChBmC,EAAI,EAAGA,EAAIsB,EAASnE,OAAQ6C,IAC7BsB,EAAStB,GAAGlG,IAAMgB,EAAOhB,KACzBwH,EAAStB,GAAGnG,OAASiB,EAAOzD,OAGpC,OAAO,MACAwD,EADP,CAEIgD,MAAOyD,IAGf,QACI,OAAOzG,IEjCJM,gBAlBE,SAACN,GACd,MAAO,CACHgD,MAAO4B,EAAc5E,GACrBqC,UAAWwC,GAAmB7E,GAC9BoE,SAAUF,EAAiBlE,GAC3BhB,OAAQqF,EAAerE,GACvBiD,QAASqB,EAAgBtE,GACzBwB,MAAOsD,GAAc9E,GACrByB,YAAa8C,EAAoBvE,GACjCrC,WAAY6G,EAAkBxE,GAC9BmD,UAAWsB,EAAkBzE,GAC7BpC,eAAgB8G,EAAsB1E,GACtCrD,MAAOuD,EAAcF,GACrBX,cAAesF,EAAsB3E,MAKZ,CAC7B7B,QF6CmB,SAACC,GAAD,8CAAU,WAAOuB,GAAP,eAAAY,EAAA,0DACzBnC,EADyB,gCAERZ,EAASW,QAAQC,GAFT,OAGL,QADhBJ,EAFqB,QAGhBgB,QACL0H,MAAM,0IACN/G,EAASmG,GAAQ9H,EAAKyB,UACtBE,EAASwG,MACTxG,EAASqG,GAAW,OACpBrG,EAASgH,aAAM,cAEfN,QAAQC,IAAItI,EAAKyB,SAVI,sBAazBE,EAASqG,GAAW,CAChB3H,SAAU,GACVC,MAAO,GACPC,KAAM,MAhBe,2CAAV,uDE5CnB4H,eACAxE,eFqC0B,SAACF,GAAD,MAAkB,CAACvE,KAAMsI,GAAkB/D,gBEpCrEyB,gBF4E2B,SAAC0D,GAAD,OAAW,SAACjH,GACvCA,EAxC6B,CAACzC,KAAMuI,GAAgBe,MAwC9BI,IACtBjH,EAxC4B,CAACzC,KAAMwI,OErCnC/B,SFwFoB,SAAC1E,EAAIzC,GAAL,8CAAe,WAAOmD,EAAUyG,GAAjB,eAAA7F,EAAA,yDAErB,MADR5D,EAAQiD,OAAOC,aAAagH,QAAQ,UADP,uBAG/BlH,EAASsG,GAAWhH,EAAIzC,IAHO,SAIzBgB,EAASuB,SAAS,CAACpC,QAAO4B,KAAM/B,EAAOyC,OAJd,6BAK7BU,EAASD,KALoB,2CAAf,yDEvFpBgE,WF+EsB,SAACzE,EAAIzC,GAAL,8CAAe,WAAOmD,EAAUyG,GAAjB,eAAA7F,EAAA,yDAEvB,MADR5D,EAAQiD,OAAOC,aAAagH,QAAQ,UADL,uBAGjClH,EAASuG,GAAajH,EAAIzC,IAHO,SAI3BgB,EAASuB,SAAS,CAACpC,QAAOqC,OAAQxC,EAAOyC,OAJd,6BAK9BU,EAASD,KALqB,2CAAf,0DErFXY,EAlCS,SAACnE,GACrB2K,IAAMC,WAAU,WACZ5K,EAAMgK,gBACP,CAAChK,EAAMsF,YAAatF,EAAMwB,WAAYxB,EAAMyB,iBAU/C,OAAO,kBAAC,EAAD,iBAAezB,EAAf,CAAsBgC,QARb,WACZhC,EAAMgC,WAOqCtB,SAJ9B,SAACL,GACdL,EAAMgC,QAAQ3B,UCUPoE,OAjBF,CACTsB,eAAgB,CACZC,QAAS,OACT6E,cAAe,UAEnBnE,QAAS,CACLoE,MAAO,OAEXC,OAAQ,CACJ9F,OAAQ,QAEZmB,MAAO,CACHnB,OAAQ,SAKDR,EAlCS,SAACzE,GAAW,IACzBuF,EAAWvF,EAAXuF,QACP,OACI,yBAAKE,UAAWF,EAAQQ,gBACpB,yBAAKN,UAAWF,EAAQwF,QACpB,kBAAC,IAAD,CAAStK,GAAG,SAASgF,UAAWF,EAAQa,OAAxC,kCACA,kBAAC,IAAD,CAAS3F,GAAG,KAAZ,8CACA,kBAAC,IAAD,CAAOuK,KAAK,SAASC,OAAQ,kBAAM,kBAAC,EAAD,SACnC,kBAAC,IAAD,CAAOC,OAAK,EAACF,KAAK,IAAIC,OAAQ,kBAAM,yBAAKxF,UAAWF,EAAQmB,SACvD1G,EAAMQ,OAAS,4BAAQsF,QAAS9F,EAAMuD,QAAvB,UAChB,kBAAC,GAAD,eCUJY,gBAPC,SAACN,GACd,MAAO,CACHrD,MAAOuD,EAAcF,GACrBjD,aAAcsD,EAAqBL,MAIT,CAACN,SAAQ4H,OX0BrB,yDAAM,WAAO3H,GAAP,SAAAY,EAAA,sDACxBZ,EAASJ,EAASK,OAAOC,aAAagH,QAAQ,WAC9ClH,EAASH,EAAiB,KAFF,2CAAN,wDW1BNc,EAlBiB,SAACnE,GAC9B2K,IAAMC,WAAU,WACZ5K,EAAMmL,WACP,IAKH,OAAO,kBAAC,GAAD,iBAAqBnL,EAArB,CAA4BuD,OAHpB,WACXvD,EAAMuD,gBCHC6H,OARf,WACI,OACI,6BACI,kBAAC,GAAD,QCMQC,QACW,cAA7B5H,OAAO6H,SAASC,UAEe,UAA7B9H,OAAO6H,SAASC,UAEhB9H,OAAO6H,SAASC,SAASC,MACvB,2D,gCCZAC,GAAWC,aAAgB,CAC7B1D,UAAWoC,GACXnG,MAAOL,EACPrD,KAAMoL,OAGJC,GAAQC,aAAYJ,GAAUK,aAAgBC,OAEpDtI,OAAOmI,MAAQA,GAEAA,UCPfI,IAASf,OAAO,kBAAC,IAAD,CAAUW,MAAOA,IAC7B,kBAAC,IAAD,KACI,kBAAC,GAAD,QAEKK,SAASC,eAAe,SFoH/B,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1K,MAAK,SAAA2K,GACjCA,EAAaC,kB","file":"static/js/main.9beaf787.chunk.js","sourcesContent":["import React from 'react'\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\nconst Login = (props) => {\r\n    return <>\r\n        {props.token && <Redirect to={'/'}/>}\r\n        <form onSubmit={props.handleSubmit}>\r\n            {props.errorMessage && props.errorMessage}\r\n            <Field component={Input} type={'text'} name={'username'} validate={[fieldRequired]}/>\r\n            <Field component={Input} type={'password'} name={'password'} validate={[fieldRequired]}/>\r\n            <button type='submit'>LogIn</button>\r\n        </form>\r\n    </>\r\n};\r\n\r\nconst Input = ({input, meta, ...props}) => {\r\n    let error;\r\n    if (meta.touched && meta.invalid) {\r\n        error = meta.error\r\n    }\r\n    return <div>\r\n        <input {...props} {...input} placeholder={error}/>\r\n    </div>\r\n};\r\n\r\nlet fieldRequired = (value) => {\r\n    if (!value) return \"Required\"\r\n};\r\n\r\nexport default reduxForm({form: 'login'})(Login);","import * as axios from \"axios\";\r\n\r\nconst userName = 'bazunts';\r\n\r\nexport const instance = axios.create({\r\n    baseURL: \"https://uxcandy.com/~shapoval/test-task-backend/v2/\",\r\n});\r\n\r\nconst tasksAPI = {\r\n    getTasks(page = 1, sort_field, sort_direction) {\r\n        return instance.get(`?developer=${userName}&page=${page}&sort_field=${sort_field}&sort_direction=${sort_direction}`).then(response => {\r\n            return response.data\r\n        }).catch(err => {\r\n            return err\r\n        })\r\n    },\r\n    addTask(task) {\r\n        let {username, email, text} = task;\r\n        let form = new FormData();\r\n        form.append(\"username\", username);\r\n        form.append(\"email\", email);\r\n        form.append(\"text\", text);\r\n        return instance.post(`create?developer=${userName}`, form).then(response => {\r\n            return response.data\r\n        }).catch(err => {\r\n            return err\r\n        })\r\n    },\r\n\r\n    logIn(user) {\r\n        let {username, password} = user;\r\n        let accessData = new FormData();\r\n        accessData.append(\"username\", username);\r\n        accessData.append(\"password\", password);\r\n        return instance.post(`login?developer=${userName}`, accessData).then(response => {\r\n            debugger\r\n            return response.data\r\n        }).catch(err => {\r\n            return err\r\n        })\r\n    },\r\n\r\n    editTask(data) {\r\n        let {token, text, status, id} = data;\r\n        let accessData;\r\n        if(text){\r\n            accessData = new FormData();\r\n            accessData.append(\"text\", text);\r\n            accessData.append(\"token\", token);\r\n        } else {\r\n            accessData = new FormData();\r\n            accessData.append(\"status\", status);\r\n            accessData.append(\"token\", token);\r\n        }\r\n\r\n        return instance.post(`/edit/${id}?developer=${userName}`, accessData).then(response => {\r\n        debugger\r\n            return response.data\r\n        }).catch(err => {\r\n            return err\r\n        })\r\n    },\r\n\r\n};\r\n\r\n\r\n\r\n\r\n\r\nexport default tasksAPI;","import tasksAPI from \"../dal/taskAPI\";\r\n\r\nconst SET_ERROR = 'TASKS/LOGIN/SET_ERROR';\r\nconst SET_TOKEN = 'TASKS/LOGIN/SET_TOKEN';\r\nconst SET_IS_AUTH_MESSAGE = 'TASKS/LOGIN/SET_IS_AUTH_MESSAGE';\r\n\r\nconst initState = {\r\n    errorMessage: null,\r\n    token: null,\r\n    isAuthMessage: 'Для редактирования задачи требуется пройти авторизацию'\r\n};\r\n\r\n\r\nconst loginReducer = (state = initState, action) => {\r\n    switch (action.type) {\r\n        case SET_ERROR:\r\n            return {\r\n                ...state,\r\n                errorMessage: action.error\r\n            };\r\n        case SET_TOKEN:\r\n            return {\r\n                ...state,\r\n                token: action.token\r\n            };\r\n        case SET_IS_AUTH_MESSAGE:\r\n            return {\r\n                ...state,\r\n                isAuthMessage: action.message\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nconst setError = (error) => ({type: SET_ERROR, error});\r\nconst setToken = (token) => ({type: SET_TOKEN, token});\r\nconst setIsAuthMessage = (message) => ({type: SET_IS_AUTH_MESSAGE, message});\r\n\r\nexport const login = (value) => async (dispatch) => {\r\n    let data = await tasksAPI.logIn(value);\r\ndebugger\r\n    if (data.status === 'error') {\r\n        dispatch(setError(data.message.password))\r\n    } else {\r\n        dispatch(setError(null));\r\n        dispatch(setToken(data.message.token));\r\n        dispatch(setIsAuthMessage(''));\r\n        window.localStorage.setItem('token', data.message.token);\r\n    }\r\n};\r\n\r\nexport const isAuth = () => async (dispatch) => {\r\n    dispatch(setToken(window.localStorage.getItem('token')));\r\n    dispatch(setIsAuthMessage(''));\r\n};\r\n\r\nexport const logOut = () => (dispatch) => {\r\n    dispatch(setToken(null));\r\n    dispatch(setToken(window.localStorage.setItem('token', '')));\r\n    dispatch(setIsAuthMessage('Для редактирования задачи требуется пройти авторизацию'));\r\n};\r\n\r\nexport default loginReducer;","import {createSelector} from \"reselect\";\r\n\r\nconst getToken = state => state.login.token;\r\nconst getErrorMessage = state => state.login.errorMessage;\r\n\r\n\r\nexport const tokenSelector = createSelector(\r\n    getToken,\r\n    (token) => token\r\n);\r\n\r\nexport const errorMessageSelector = createSelector(\r\n    getErrorMessage,\r\n    (errorMessage) => errorMessage\r\n);\r\n","import {connect} from \"react-redux\";\r\nimport React from \"react\";\r\nimport Login from \"../ui/Login\";\r\nimport {login, logOut} from \"../bll/loginReducer\";\r\nimport {errorMessageSelector, tokenSelector} from \"../Selectors/loginSelectors\";\r\n\r\nconst LoginController = (props) => {\r\n    const onSubmit = (value) => {\r\n        props.login(value);\r\n    };\r\n    return <Login {...props}  onSubmit={onSubmit} logOut={logOut}/>\r\n};\r\n\r\nconst mapState = (state) => {\r\n    return {\r\n        token: tokenSelector(state),\r\n        errorMessage: errorMessageSelector(state),\r\n    }\r\n};\r\n\r\nexport default  connect(mapState, {login, logOut})(LoginController);","import React from 'react';\r\nimport {Field} from \"redux-form\";\r\n\r\nconst NewTaskForm = () => {\r\n    return <>\r\n        <span/>\r\n        <Field component={Input} type={'text'} name={'username'} validate={[fieldRequired]}/>\r\n        <Field component={Input} type={'email'} name={'email'} validate={[fieldRequired, emailRequired]}/>\r\n        <Field component={Input} type={'text'} name={'text'} validate={[fieldRequired]}/>\r\n        <button type=\"submit\">Добавить</button>\r\n    </>\r\n};\r\n\r\nconst Input = ({input, meta, ...props}) => {\r\n    let error;\r\n    if(meta.touched && meta.invalid){\r\n        error = meta.error\r\n    }\r\n    return <div>\r\n        <input {...props} {...input} placeholder={error}/>\r\n    </div>\r\n};\r\n\r\nlet fieldRequired = (value) => {\r\n    if (!value) return \"Required\"\r\n};\r\n\r\nlet emailRequired = (value) => {\r\n    const errors = {};\r\n    if (!value.email) {\r\n        errors.email = 'Required'\r\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value.email)) {\r\n        errors.email = 'Invalid email address'\r\n    }\r\n};\r\n\r\nexport default NewTaskForm;","import React from 'react'\r\nimport injectSheet from \"react-jss\";\r\n\r\nconst Pagination = ({pages, currentPage, classes, setCurrentPage}) => {\r\nreturn <div className={classes.navigationPage}>\r\n    {pages.map((p, index) => <span key={index} onClick={() => setCurrentPage(p)} className={currentPage === p ? classes.paginationActive : classes.pagination}>{p}</span>)}\r\n</div>\r\n};\r\n\r\nlet styles = {\r\n    paginationActive: {\r\n        cursor: 'pointer',\r\n        border: '1px solid',\r\n        background: '#65abd0',\r\n        color: '#fff',\r\n        padding: '2px',\r\n    },\r\n\r\n    pagination: {\r\n        cursor: 'pointer',\r\n        background: '#fff',\r\n        color: '#000',\r\n        padding: '2px',\r\n        margin: '2px',\r\n        '&:hover': {\r\n            cursor: 'pointer',\r\n            background: '#65abd0',\r\n            color: '#000',\r\n            padding: '2px',\r\n        }\r\n    },\r\n    navigationPage: {\r\n        marginTop: '10px',\r\n        marginBottom: '10px',\r\n    }\r\n\r\n};\r\nexport default injectSheet(styles)(Pagination);","import React from 'react';\r\nimport injectSheet from \"react-jss\";\r\nimport NewTaskForm from \"./NewTaskForm\";\r\nimport {reduxForm} from \"redux-form\";\r\nimport Pagination from \"./Pagination\";\r\n\r\n\r\nconst TasksList = (props) => {\r\n    const {tasks, taskTitle, classes, newTask, addTask, pages, currentPage, setCurrentPage, setSortSettings, sort_field, direction, token, isAuthMessage} = props;\r\n\r\n\r\n    const editStatus = (event) => {\r\n        let id = event.target.dataset.id;\r\n        let value = event.currentTarget.checked ? 10 : 0;\r\n        props.saveStatus(id, value);\r\n    };\r\n\r\n\r\n    const saveText = (event) => {\r\n        let id = event.target.dataset.id;\r\n        let value = event.currentTarget.value;\r\n        props.saveText(id, value);\r\n    };\r\n\r\n\r\n    return <div>\r\n        <span className={classes.error}>{isAuthMessage && isAuthMessage}</span>\r\n        <div>\r\n            <button onClick={addTask}>Добавить задачу</button>\r\n        </div>\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div className={classes.wrapperContent}>\r\n                {taskTitle.map(title => <span key={Object.keys(title)}\r\n                                              onClick={() => setSortSettings(Object.keys(title))}\r\n                                              className={classes.title}>{Object.values(title)}<span>{String(Object.keys(title)) === sort_field && direction}</span></span>)}\r\n                {!token ? tasks.map(task =>\r\n                        Object.keys(task).map((key, index) => (task[key] === 10 ?\r\n                            <span key={index}>Выполнено</span> : task[key] === 0 ? <span key={index}>Не выполнено</span> :\r\n                                <div key={index} className={classes.content}>{task[key]}</div>))\r\n                    ) :\r\n                    tasks.map(task =>\r\n                        Object.keys(task).map((key, index) => (task[key] === 10 || task[key] === 0 ?\r\n                            <input key={index} data-id={task.id} type={'checkbox'} checked={task[key]}\r\n                                   onChange={editStatus}/> : key === 'text' ?\r\n                                <input key={index} data-id={task.id} type={'text'} value={task[key]}\r\n                                       onChange={saveText}/> :\r\n                                <span key={index} className={classes.content}>{task[key]}</span>)\r\n                        ))\r\n                }\r\n\r\n                {newTask && <NewTaskForm/>}\r\n            </div>\r\n        </form>\r\n        <div className={classes.pagination}>\r\n            <Pagination pages={pages} currentPage={currentPage} setCurrentPage={setCurrentPage}/>\r\n        </div>\r\n    </div>\r\n};\r\n\r\n\r\nlet styles = {\r\n    wrapperContent: (props) => ({\r\n        display: 'grid',\r\n        gridTemplateColumns: `repeat(${props.taskTitle.length}, 1fr)`,\r\n    }),\r\n\r\n    title: {\r\n        cursor: 'pointer',\r\n        fontSize: '16px',\r\n        fontWeight: 'bold',\r\n        paddingLeft: '3px',\r\n        marginRight: '2px',\r\n        backgroundColor: '#90e2ff',\r\n    },\r\n\r\n    content: {\r\n        fontSize: '14px',\r\n        margin: '5px',\r\n        borderBottom: '1px solid #9A9C99'\r\n    },\r\n    pagination: {\r\n        textAlign: \"center\"\r\n    },\r\n    error: {\r\n        color: \"red\"\r\n    }\r\n};\r\n\r\nexport default reduxForm({form: 'new-task'})(injectSheet(styles)(TasksList));\r\n\r\n","import {createSelector} from \"reselect\";\r\n\r\nconst getEditMode = state => state.tasksPage.editMode;\r\nconst getStatus = state => state.tasksPage.status;\r\nconst getNewTask = state => state.tasksPage.newTask;\r\nconst getCurrentPage = state => state.tasksPage.currentPage;\r\nconst getSortField = state => state.tasksPage.sort_field;\r\nconst getDirection = state => state.tasksPage.direction;\r\nconst getSortDirection = state => state.tasksPage.sort_direction;\r\nconst getIsAuthMessage = state => state.tasksPage.isAuthMessage;\r\n\r\nexport const getTasks = state => {\r\n    const tasks = state.tasksPage.tasks;\r\n    if (tasks.length) {\r\n        return Object.keys(tasks).map(key => ({\r\n            id: tasks[key].id,\r\n            username: tasks[key].username,\r\n            email: tasks[key].email,\r\n            text: tasks[key].text,\r\n            status: tasks[key].status,\r\n        }))\r\n    } else return tasks\r\n};\r\n\r\nexport const getTasksTitle = state => {\r\n    const taskTitle = state.tasksPage.taskTitle;\r\n    return Object.keys(taskTitle).map(key => ({[key]: taskTitle[key]}));\r\n};\r\n\r\nexport const getPages = state => {\r\n    const total_task_count = state.tasksPage.total_task_count;\r\n    let pageCount = Math.ceil(total_task_count / 3);\r\n    let pages = [];\r\n    for (let i = 1; i <= pageCount; i++) {\r\n        pages.push(i);\r\n    }\r\n    return pages;\r\n};\r\n\r\n\r\nexport const editModeSelector = createSelector(getEditMode, editMode => editMode);\r\nexport const statusSelector = createSelector(getStatus, status => status);\r\nexport const newTaskSelector = createSelector(getNewTask, newTask => newTask);\r\nexport const currentPageSelector = createSelector(getCurrentPage, currentPage => currentPage);\r\nexport const sortFieldSelector = createSelector(getSortField, sort_field => sort_field);\r\nexport const directionSelector = createSelector(getDirection, direction => direction);\r\nexport const sortDirectionSelector = createSelector(getSortDirection, sort_direction => sort_direction);\r\nexport const isAuthMessageSelector = createSelector(getIsAuthMessage, isAuthMessage => isAuthMessage);\r\nexport const tasksSelector = createSelector(getTasks, (tasks) => tasks);\r\nexport const tasksTitleSelector = createSelector(getTasksTitle,(taskTitle) => taskTitle);\r\nexport const pagesSelector = createSelector(getPages,(pages) => pages);\r\n\r\n","import {taskTitle} from \"../dal/TaskModel\";\r\nimport {reset} from \"redux-form\"\r\nimport tasksAPI from \"../dal/taskAPI\";\r\nimport {logOut} from \"./loginReducer\";\r\n\r\nconst ADD_TASK = 'TASKS/MANAGEMENT/ADD_TASK';\r\nconst SET_TASKS = 'TASKS/MANAGEMENT/SET_TASKS';\r\nconst NEW_TASK = 'TASKS/MANAGEMENT/NEW_TASK';\r\nconst SET_CURRENT_PAGE = 'TASKS/MANAGEMENT/SET_CURRENT_PAGE';\r\nconst SET_SORT_FIELD = 'TASKS/MANAGEMENT/SET_SORT_FIELD';\r\nconst SET_DIRECTION = 'TASKS/MANAGEMENT/SET_DIRECTION';\r\nconst SET_CHANGE_TEXT = 'TASKS/MANAGEMENT/SET_CHANGE_TEXT';\r\nconst SET_CHANGE_STATUS = 'TASKS/MANAGEMENT/SET_CHANGE_STATUS';\r\n\r\nconst initState = {\r\n    taskTitle: taskTitle,\r\n    tasks: [],\r\n    total_task_count: 0,\r\n    newTask: null,\r\n    editMode: false,\r\n    messageSuccess: null,\r\n    pages: [],\r\n    currentPage: 1,\r\n    sort_field: 'id',\r\n    sort_direction: 'asc',\r\n    direction: \"/\\\\\",\r\n\r\n};\r\n\r\nconst tasksReduser = (state = initState, action) => {\r\n    switch (action.type) {\r\n        case NEW_TASK:\r\n            return {\r\n                ...state,\r\n                newTask: action.task\r\n            };\r\n        case ADD_TASK:\r\n            return {\r\n                ...state,\r\n                tasks: [...state.tasks, action.task]\r\n            };\r\n        case SET_TASKS:\r\n            return {\r\n                ...state,\r\n                tasks: action.tasks,\r\n                total_task_count: action.total_task_count\r\n            };\r\n        case SET_CURRENT_PAGE:\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            };\r\n        case SET_DIRECTION:\r\n            return {\r\n                ...state,\r\n                sort_direction: state.sort_direction === 'asc' ? 'desc' : 'asc',\r\n                direction: state.direction === '/\\\\' ? '\\\\/' : '/\\\\',\r\n            };\r\n        case SET_SORT_FIELD:\r\n            return {\r\n                ...state,\r\n                sort_field: action.filed[0]\r\n            };\r\n        case SET_CHANGE_TEXT:\r\n            let newTasks = [...state.tasks];\r\n            for (let i = 0; i < newTasks.length; i++) {\r\n                if (newTasks[i].id == action.id) {\r\n                    newTasks[i].text = action.value\r\n                }\r\n            }\r\n            return {\r\n                ...state,\r\n                tasks: newTasks\r\n            };\r\n        case SET_CHANGE_STATUS: {\r\n            let newTasks = [...state.tasks];\r\n            for (let i = 0; i < newTasks.length; i++) {\r\n                if (newTasks[i].id == action.id) {\r\n                    newTasks[i].status = action.value\r\n                }\r\n            }\r\n            return {\r\n                ...state,\r\n                tasks: newTasks\r\n            };\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nconst setTask = (task) => ({type: ADD_TASK, task});\r\nconst setTasks = (tasks, total_task_count) => ({type: SET_TASKS, tasks, total_task_count});\r\nconst setNewTask = (task) => ({type: NEW_TASK, task});\r\nexport const setCurrentPage = (currentPage) => ({type: SET_CURRENT_PAGE, currentPage});\r\nconst setSortField = (filed) => ({type: SET_SORT_FIELD, filed});\r\nconst setSortDirection = () => ({type: SET_DIRECTION});\r\nconst changeText = (id, value) => ({type: SET_CHANGE_TEXT, id, value});\r\nconst changeStatus = (id, value) => ({type: SET_CHANGE_STATUS, id, value});\r\n\r\nexport const addTask = (task) => async (dispatch) => {\r\n    if (task) {\r\n        let data = await tasksAPI.addTask(task);\r\n        if (data.status === 'ok') {\r\n            alert('Задача успешно добавлена');\r\n            dispatch(setTask(data.message));\r\n            dispatch(getTasksAll());\r\n            dispatch(setNewTask(null));\r\n            dispatch(reset('new-task'))\r\n        } else {\r\n            console.log(data.message)\r\n        }\r\n    } else {\r\n        dispatch(setNewTask({\r\n            username: '',\r\n            email: '',\r\n            text: ''\r\n        }))\r\n    }\r\n};\r\n\r\nexport const getTasksAll = () => async (dispatch, getState) => {\r\n    const currentPage = getState().tasksPage.currentPage;\r\n    const sort_field = getState().tasksPage.sort_field;\r\n    const sort_direction = getState().tasksPage.sort_direction;\r\n    let data = await tasksAPI.getTasks(currentPage, sort_field, sort_direction);\r\n    if (data.status === 'ok') {\r\n        let {tasks, total_task_count} = data.message;\r\n        dispatch(setTasks(tasks, total_task_count))\r\n    } else {\r\n        console.log(data.message)\r\n    }\r\n};\r\n\r\nexport const setSortSettings = (field) => (dispatch) => {\r\n    dispatch(setSortField(field));\r\n    dispatch(setSortDirection());\r\n};\r\n\r\nexport const saveStatus = (id, value) => async (dispatch, getState) => {\r\n    const token = window.localStorage.getItem('token');\r\n    if (token !== '') {\r\n        dispatch(changeStatus(id, value));\r\n        await tasksAPI.editTask({token, status: value, id});\r\n    } else dispatch(logOut())\r\n};\r\n\r\nexport const saveText = (id, value) => async (dispatch, getState) => {\r\n    const token = window.localStorage.getItem('token');\r\n    if (token !== '') {\r\n        dispatch(changeText(id, value));\r\n        await tasksAPI.editTask({token, text: value, id});\r\n    }else dispatch(logOut())\r\n};\r\n\r\n\r\nexport default tasksReduser","export const taskTitle = {\r\n    id: \"id\",\r\n    username: 'Имя пользователя',\r\n    email: 'E-mail',\r\n    text: 'Текст задачи',\r\n    status: 'Статус'\r\n};","import {connect} from \"react-redux\";\r\nimport TasksList from \"../ui/TasksList\";\r\nimport React from \"react\";\r\nimport {\r\n    currentPageSelector, directionSelector,\r\n    editModeSelector,\r\n    isAuthMessageSelector, newTaskSelector,\r\n    pagesSelector, sortDirectionSelector, sortFieldSelector, statusSelector,\r\n    tasksSelector,\r\n    tasksTitleSelector\r\n} from \"../Selectors/tasksSelector\";\r\nimport {\r\n    addTask,\r\n    getTasksAll, saveStatus, saveText,\r\n    setCurrentPage,\r\n    setSortSettings\r\n} from \"../bll/tasksReducer\";\r\nimport {tokenSelector} from \"../Selectors/loginSelectors\";\r\n\r\n\r\nconst TasksController = (props) => {\r\n    React.useEffect(() => {\r\n        props.getTasksAll()\r\n    }, [props.currentPage, props.sort_field, props.sort_direction]);\r\n\r\n    const addTask = () => {\r\n        props.addTask()\r\n    };\r\n\r\n    const onSubmit = (value) => {\r\n        props.addTask(value);\r\n\r\n    };\r\n    return <TasksList {...props} addTask={addTask} onSubmit={onSubmit}/>\r\n};\r\n\r\nconst mapState = (state) => {\r\n    return {\r\n        tasks: tasksSelector(state),\r\n        taskTitle: tasksTitleSelector(state),\r\n        editMode: editModeSelector(state),\r\n        status: statusSelector(state),\r\n        newTask: newTaskSelector(state),\r\n        pages: pagesSelector(state),\r\n        currentPage: currentPageSelector(state),\r\n        sort_field: sortFieldSelector(state),\r\n        direction: directionSelector(state),\r\n        sort_direction: sortDirectionSelector(state),\r\n        token: tokenSelector(state),\r\n        isAuthMessage: isAuthMessageSelector(state),\r\n    }\r\n};\r\n\r\n\r\nexport default connect(mapState, {\r\n    addTask,\r\n    getTasksAll,\r\n    setCurrentPage,\r\n    setSortSettings,\r\n    saveText,\r\n    saveStatus\r\n})(TasksController);","import React from 'react';\r\nimport injectSheet from \"react-jss\";\r\nimport {NavLink, Route} from \"react-router-dom\";\r\nimport LoginController from \"../Controllers/LoginControler\";\r\nimport TasksController from \"../Controllers/TasksController\";\r\n\r\nconst TasksManagement = (props) => {\r\n    const {classes} = props;\r\n    return (\r\n        <div className={classes.wrapperContent}>\r\n            <div className={classes.navbar}>\r\n                <NavLink to=\"/login\" className={classes.title}>Войти</NavLink>\r\n                <NavLink to=\"/\">Главная</NavLink>\r\n                <Route path='/login' render={() => <LoginController/>}/>\r\n                <Route exact path='/' render={() => <div className={classes.content}>\r\n                    {props.token && <button onClick={props.logOut}>LogOut</button>}\r\n                    <TasksController/>\r\n                </div>}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nlet styles = {\r\n    wrapperContent: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n    },\r\n    content: {\r\n        width: '50%'\r\n    },\r\n    navbar: {\r\n        margin: '10px'\r\n    },\r\n    title: {\r\n        margin: '10px'\r\n    }\r\n\r\n};\r\n\r\nexport default injectSheet(styles)(TasksManagement);","import {connect} from \"react-redux\";\r\nimport React from \"react\";\r\nimport TasksManagement from \"../ui/TasksManagement\";\r\nimport {isAuth, logOut} from \"../bll/loginReducer\";\r\nimport {errorMessageSelector, tokenSelector} from \"../Selectors/loginSelectors\";\r\n\r\n\r\n\r\nconst TaskManagementController = (props) => {\r\n    React.useEffect(() => {\r\n        props.isAuth()\r\n    }, []);\r\n\r\n    const logOut = () => {\r\n        props.logOut();\r\n    };\r\n    return <TasksManagement {...props} logOut={logOut} />\r\n};\r\n\r\nconst mapState = (state) => {\r\n    return {\r\n        token: tokenSelector(state),\r\n        errorMessage: errorMessageSelector(state),\r\n    }\r\n};\r\n\r\nexport default  connect(mapState, {logOut, isAuth})(TaskManagementController);","import React from 'react';\nimport TaskManagementController from \"./Controllers/TaskManagementController\";\n\nfunction App() {\n    return (\n        <div>\n            <TaskManagementController />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import thunk from \"redux-thunk\";\r\nimport {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport tasksReduser from \"./tasksReducer\";\r\nimport {reducer as formReducer} from 'redux-form'\r\nimport loginReducer from \"./loginReducer\";\r\n\r\nconst reducers = combineReducers({\r\n    tasksPage: tasksReduser,\r\n    login: loginReducer,\r\n    form: formReducer\r\n});\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunk));\r\n\r\nwindow.store = store;\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from './bll/store'\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(<Provider store={store}>\n    <BrowserRouter>\n        <App/>\n    </BrowserRouter>\n</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}